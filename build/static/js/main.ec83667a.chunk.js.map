{"version":3,"sources":["ExpenseTracker/Expense.js","ExpenseTracker/ExpenseTracker.jsx","App.js","serviceWorker.js","index.js"],"names":["Expense","name","cost","category","this","ExpenseTracker","props","state","array","handleNameChange","bind","handleCostChange","handleCategoryChange","handleSubmit","event","setState","target","value","isNaN","parseFloat","checkValidCost","newArray","expense","push","preventDefault","item","splice","indexOf","className","type","onChange","placeholder","onClick","map","removeItem","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec83667a.chunk.js","sourcesContent":["export default class Expense {\r\n    #name = \"\";\r\n    #cost = \"\";\r\n    #category = \"\";\r\n    constructor(name, cost, category) {\r\n        this.#name = name;\r\n        this.#cost = cost;\r\n        this.#category = category;\r\n    }\r\n\r\n    get name() {\r\n        return this.#name;\r\n    }\r\n\r\n    get cost() {\r\n        return this.#cost;\r\n    }\r\n\r\n    get category() {\r\n        return this.#category;\r\n    }\r\n}","import React from \"react\";\r\nimport \"./ExpenseTracker.css\";\r\nimport Expense from \"./Expense.js\";\r\n\r\nexport default class ExpenseTracker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            name: \"\",\r\n            cost: \"\",\r\n            category: \"\",\r\n        };\r\n\r\n        // Enabled use of 'this' keyword for these functions\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleCostChange = this.handleCostChange.bind(this);\r\n        this.handleCategoryChange = this.handleCategoryChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.setState({ name: event.target.value });\r\n    }\r\n\r\n    handleCostChange(event) {\r\n        this.setState({ cost: event.target.value });\r\n    }\r\n\r\n    handleCategoryChange(event) {\r\n        this.setState({ category: event.target.value });\r\n    }\r\n\r\n    // Used in handleSubmit\r\n    checkValidCost() {\r\n        if (isNaN(parseFloat(this.state.cost))) {\r\n            return false;\r\n        } else return true;\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        // Prevents non-number costs from being added to the list\r\n        if (!this.checkValidCost()) {\r\n            this.setState({ cost: \"\" });\r\n        } else {\r\n            let newArray = this.state.array;\r\n            let expense = new Expense(\r\n                this.state.name,\r\n                parseFloat(this.state.cost),\r\n                this.state.category\r\n            );\r\n            newArray.push(expense);\r\n            this.setState({ array: newArray });\r\n        }\r\n        // Prevents screen refresh when adding to the array\r\n        event.preventDefault();\r\n    }\r\n\r\n    removeItem(item) {\r\n        // Locates index of given Expense instance and removes\r\n        let array = this.state.array;\r\n        array.splice(array.indexOf(item), 1);\r\n        this.setState({ array: array });\r\n    }\r\n\r\n    render() {\r\n        let array = this.state.array;\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <div className=\"user-input\">\r\n                    New Expense\r\n                    <form>\r\n                        <label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={this.state.name}\r\n                                onChange={this.handleNameChange}\r\n                                placeholder=\"Name\"\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={this.state.cost}\r\n                                onChange={this.handleCostChange}\r\n                                placeholder=\"Cost\"\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={this.state.category}\r\n                                onChange={this.handleCategoryChange}\r\n                                placeholder=\"Category\"\r\n                            />\r\n                        </label>\r\n                        <input\r\n                            type=\"submit\"\r\n                            value=\"Submit\"\r\n                            onClick={this.handleSubmit}\r\n                        />\r\n                    </form>\r\n                </div>\r\n                <div className=\"expense-list-container\">\r\n                    <div className=\"expense-list\">\r\n                        <div className=\"expense\">\r\n                            <div className=\"item\">\r\n                                <strong>Name</strong>\r\n                            </div>\r\n                            <div className=\"mid-item\">\r\n                                <strong>Cost</strong>\r\n                            </div>\r\n                            <div className=\"item\">\r\n                                <strong>Category</strong>\r\n                            </div>\r\n                        </div>\r\n                        {array.map((value) => (\r\n                            <div className=\"expense\">\r\n                                <div className=\"item\">{value.name}</div>\r\n                                <div className=\"mid-item\">${value.cost}</div>\r\n                                <div className=\"item\">{value.category}</div>\r\n                                <div\r\n                                    className=\"button\"\r\n                                    onClick={() => this.removeItem(value)}\r\n                                >\r\n                                    Remove\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport ExpenseTracker from './ExpenseTracker/ExpenseTracker.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExpenseTracker></ExpenseTracker>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}